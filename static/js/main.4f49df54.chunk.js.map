{"version":3,"sources":["components/Household.js","lib/formatDate.js","lib/formatMoney.js","components/Daily.js","lib/formatRoman.js","components/Expense.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","HouseholdTable","table","Household","children","formatDate","date","year","substr","month","day","formatMoney","money","toString","replace","IndexTd","td","ModifyButton","FieldTd","props","align","ResultTd","minus","IncomeTextField","input","Daily","index","income","total","modify","setModify","onModify","useState","String","incomeValue","setIncomeValue","rowSpan","length","colSpan","type","value","onChange","e","target","onKeyDown","keycode","preventDefault","key","Number","onClick","color","fontSize","formatRoman","num","a","roman","romanNumList","M","CM","D","CD","C","XC","L","XV","X","IX","V","IV","I","Math","floor","i","tr","ExpenseTd","RemoveButton","Expense","id","name","price","place","onRemove","useStyles","makeStyles","theme","createStyles","textField","maxWidth","backgroundColor","button","marginTop","spacing","Form","data","setData","Date","setDate","setName","setPrice","setPlace","classes","utils","DateFnsUtils","locale","koLocale","autoOk","variant","inputVariant","margin","fullWidth","className","format","label","TextField","Button","maxId","reduce","acc","daily","maxDailyId","expenses","expense","isNaN","getFullYear","getMonth","getDate","strDate","selectDataIndex","findIndex","console","log","addedData","localStorage","setItem","JSON","stringify","filteredData","filter","selectData","unshift","modifiedData","handleAdd","Title","Container","App","localData","getItem","getData","parse","initialData","sortedData","sort","b","map","sortedExpenses","handleRemove","removedData","handleModifyIncome","modifiedIncome","idx","cur","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f49df54.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Household = ({ children }) => {\r\n  return (\r\n    <Wrapper>\r\n      {/* children = Daily + Expense */}\r\n      <HouseholdTable>{children}</HouseholdTable>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\n// 전체를 표로 생성 - table\r\nconst HouseholdTable = styled.table`\r\n  width: 100%;\r\n`;\r\n\r\nexport default Household;\r\n","const formatDate = (date) => {\r\n  const year = date.substr(0, 4);\r\n  const month = date.substr(4, 2);\r\n  const day = date.substr(6, 2);\r\n  return `${year}/${month}/${day}`;\r\n};\r\n\r\nexport default formatDate;\r\n","// 어떤 함수를 처리해서 값을 반환(return)하는 게 아니라\r\n// 단순히 들어온 숫자값을 문자열로 바꿔서 쉼표 찍어주는 기능만 하는 컴포넌트\r\n//  => return문 없고, 즉 함수가 아니므로 {}를 쓰지 않는다.\r\nconst formatMoney = (money) => money.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\nexport default formatMoney;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport formatDate from '../lib/formatDate';\r\nimport formatMoney from '../lib/formatMoney';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst Daily = ({ index, children, date, income, total, modify, setModify, onModify }) => {\r\n  // 수입 초기값: string 형태의 income (사용자에 의해 입력된 값은 '문자열'로 간주하므로)\r\n  const [incomeValue, setIncomeValue] = useState(String(income));\r\n\r\n  // 엔터 처리\r\n  const handleKeyDown = (e) => {\r\n    // (엔터키 대신) 다른 특정 키보드 누른 경우 새로고침 막기\r\n    // 69: e(소문자 e) , 190: '.'(마침표) , 109: '-(숫자패드 빼기)', 189: '-'(대쉬)\r\n    // (계산기에서 e -> 10의 지수 (예: 2.5e13), 마침표는 소수점)\r\n    if (e.keycode === 69 || e.keycode === 190 || e.keycode === 109 || e.keycode === 189) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    // ** 엔터키를 누른 경우\r\n    if (e.key === 'Enter') {\r\n      // 수입수정: 받아온 index와 사용자가 입력한 incomeValue(문자열)를 Number화 해서 넣어줌\r\n      onModify(index, Number(incomeValue));\r\n      // 마우스 hover 여부 -> (인덱스로 처리중) 0으로 초기화\r\n      setModify(0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        {/* rowspan: 세로로 병합 */}\r\n        <IndexTd rowSpan={children.length + 5}>{index}</IndexTd>\r\n        <FieldTd align='center'>{formatDate(date)}</FieldTd>\r\n        <FieldTd align='center'>수입</FieldTd>\r\n        <FieldTd align='left' colSpan={2}>\r\n          &nbsp;\r\n          {/* 연필 아이콘을 클릭하여 modify값이 존재할 때 */}\r\n          {modify ? (\r\n            // 수입을 수정할 input창 나타남\r\n            <IncomeTextField\r\n              // 주의: type이 number라고 해서 입력값이 '숫자'로 바뀌는 게 아니라 input창 옆에 위아래 증감버튼이 생길 뿐\r\n              // 기본적으로 input창에 입력되는 값은 '문자열' -> 숫자로 바꾸는 건 Number(), parseInt() 통해 따로 처리 필요)\r\n              type='number'\r\n              // value는 incomeValue\r\n              value={incomeValue}\r\n              // setIncomeValue에 입력된 값(e.target.value)을 넣어 incomeValue 업데이트\r\n              onChange={(e) => setIncomeValue(e.target.value)}\r\n              // 엔터 처리\r\n              onKeyDown={handleKeyDown}\r\n            />\r\n          ) : (\r\n            // 연필 아이콘을 아직 클릭 안 해서 modify값이 없을 때\r\n            <>\r\n              {/* 현재 income 보여주기 */}\r\n              {formatMoney(income)}\r\n\r\n              {/* 연필 아이콘에 onClick 이벤트 미리 넣어둠 */}\r\n              <ModifyButton\r\n                // 아이콘 클릭 시\r\n                onClick={() => {\r\n                  // 기존 수입이 input에 미리 들어가 있도록 하고(input 안의 값은 문자열)\r\n                  setIncomeValue(String(income));\r\n                  // setModify에 index 넣어서 modify값이 존재하게 함\r\n                  setModify(index);\r\n                }}\r\n              >\r\n                <EditIcon color='action' fontSize='small' />\r\n              </ModifyButton>\r\n            </>\r\n          )}\r\n        </FieldTd>\r\n      </tr>\r\n      <tr>\r\n        <FieldTd align='center'>번호</FieldTd>\r\n        <FieldTd align='center'>품목</FieldTd>\r\n        <FieldTd align='center'>가격</FieldTd>\r\n        <FieldTd align='center'>구입처</FieldTd>\r\n      </tr>\r\n\r\n      {/* Expense(지출항목) 컴포넌트 들어갈 자리 */}\r\n      {children}\r\n\r\n      <tr>\r\n        <ResultTd align='center'>지출항목수</ResultTd>\r\n        {/* colspan: 가로로 병합 */}\r\n        <ResultTd align='left' colSpan={3}>\r\n          {/* (= Expense 길이) */}\r\n          &nbsp;{children.length}\r\n        </ResultTd>\r\n      </tr>\r\n      <tr>\r\n        <ResultTd align='center'>총지출</ResultTd>\r\n        <ResultTd align='left' colSpan={3}>\r\n          {/* 총지출 금액을 천 단위로 구분 */}\r\n          &nbsp;{formatMoney(total)}\r\n        </ResultTd>\r\n      </tr>\r\n      <tr>\r\n        <ResultTd align='center'>잔액</ResultTd>\r\n        {/* minus props에 조건문 (income이 total보다 적을 때만 true) */}\r\n        <ResultTd align='left' colSpan={3} minus={income < total}>\r\n          {/* 잔액이 minus이면 앞에 \"[적자]\" */}\r\n          {income < total ? '[적자]' : null}\r\n          {/* 잔액 = 수입 - 총지출 */}\r\n          &nbsp;{formatMoney(income - total)}\r\n        </ResultTd>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\n// 맨 왼쪽의 항목별 번호\r\nconst IndexTd = styled.td`\r\n  background: #835151;\r\n  color: #fff;\r\n  text-align: center;\r\n  width: 20px;\r\n`;\r\n\r\n// 연필 아이콘 있는 영역 (연필 아이콘 = <EditIcon/>)\r\nconst ModifyButton = styled.div`\r\n  float: right;\r\n  /* hover 하기 전에는 렌더 트리에 요소 자체가 없어야 함 */\r\n  display: none;\r\n  cursor: pointer;\r\n`;\r\n\r\n// 항목별 품목, 가격, 구입처 등 필드 영역\r\nconst FieldTd = styled.td`\r\n  background: #c2f784;\r\n  color: #000000;\r\n  text-align: ${(props) => props.align};\r\n  height: 26px;\r\n\r\n  /* 필드 영역에 마우스 hover하면 연필 아이콘 등장 */\r\n  &:hover ${ModifyButton} {\r\n    display: block;\r\n  }\r\n`;\r\n\r\n// 항목별 아래 지출항목수, 총지출, 잔액\r\nconst ResultTd = styled.td`\r\n  background: #ffc1c1;\r\n  color: ${(props) => (props.minus ? '#ff0000' : '#000')};\r\n  text-align: ${(props) => props.align};\r\n  height: 26px;\r\n`;\r\n\r\n// 수입 수정 input\r\nconst IncomeTextField = styled.input`\r\n  border: none;\r\n  background: transparent;\r\n  width: 100%;\r\n  font-size: 16px;\r\n`;\r\n\r\nexport default Daily;\r\n","const formatRoman = (num) => {\r\n  // 반환할 로마숫자 (string)\r\n  let roman = '';\r\n\r\n  // 로마숫자를 key: value 형식으로 가져옴\r\n  const romanNumList = {\r\n    M: 1000,\r\n    CM: 900,\r\n    D: 500,\r\n    CD: 400,\r\n    C: 100,\r\n    XC: 90,\r\n    L: 50,\r\n    XV: 40,\r\n    X: 10,\r\n    IX: 9,\r\n    V: 5,\r\n    IV: 4,\r\n    I: 1,\r\n  };\r\n\r\n  // a를 전역변수로 선언 (for문이 돌 때마다 매번 선언하지 않도록?)\r\n  let a;\r\n\r\n  // for-in문\r\n  // key: value 여러 개로 이루어진 객체에서 프로퍼티(key)를 꺼냄\r\n  // (value는 '객체[key]'로 가져옴)\r\n  for (let key in romanNumList) {\r\n    // a는 받아온 num을 romanList의 value들로 일일이 나눈 값\r\n    a = Math.floor(num / romanNumList[key]);\r\n\r\n    // a가 0보다 크다면 (음수가 아니라면?)\r\n    if (a >= 0) {\r\n      // a 길이만큼 한 번 더 돌면서\r\n      for (let i = 0; i < a; i++) {\r\n        // roman 변수에 key를 더해줌 (=> 로마숫자 생성?)\r\n        roman += key;\r\n      }\r\n    }\r\n\r\n    // if문에 안 걸리면 num은 num을 romanList의 value로 나눈 나머지 (= 일의 자리?)\r\n    num = num % romanNumList[key];\r\n    // 그리고 이 num으로 for문을 한 번 더 돈다\r\n  }\r\n\r\n  // 최종 생성된 로마숫자 반환\r\n  return roman;\r\n};\r\n\r\nexport default formatRoman;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport formatMoney from '../lib/formatMoney';\r\nimport formatRoman from '../lib/formatRoman';\r\n\r\nconst Expense = ({ id, index, name, price, place, onRemove }) => {\r\n  return (\r\n    <Wrapper>\r\n      {/* 로마숫자 옆에 '.'을 붙여 띄워주는 센스 */}\r\n      <ExpenseTd align='center'>{formatRoman(index)}.</ExpenseTd>\r\n      <ExpenseTd align='center'>{name}</ExpenseTd>\r\n      <ExpenseTd align='left'>&nbsp;{formatMoney(price)}</ExpenseTd>\r\n\r\n      {/* 구입처 블록 영역에 삭제버튼 컴포넌트 추가 */}\r\n      <ExpenseTd align='left'>\r\n        &nbsp;{place}\r\n        {/* 삭제버튼 - 클릭 시 삭제함수 호출 ('x'문자 = $times; - 글자로 취급, 색상변경 가능) */}\r\n        <RemoveButton onClick={() => onRemove(id)}>&times;</RemoveButton>\r\n      </ExpenseTd>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\n// 다른 컴포넌트와 형태 맞추기 위해 + tr 넣기 위해 Wrapper 선언\r\n// styled에서 아무 스타일 안 줄 수도 있음\r\nconst Wrapper = styled.tr``;\r\n\r\nconst ExpenseTd = styled.td`\r\n  background: #fff47d;\r\n  color: #000000;\r\n  text-align: ${(props) => props.align};\r\n  height: 26px;\r\n`;\r\n\r\nconst RemoveButton = styled.div`\r\n  /* $times;(x 문자) - 빨간색 */\r\n  color: #ff0000;\r\n  /* float: 주변 요소에 영향 안 주고 정렬 */\r\n  float: right;\r\n  margin-right: 4px;\r\n  cursor: pointer;\r\n\r\n  // hover 전에는 안 보임(렌더링 자체가 되지 않음)\r\n  display: none;\r\n  // Expense 영역(Wrapper)에 hover 시 등장 (사이에 &: '~하면(and)')\r\n  ${Wrapper}:hover & {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nexport default Expense;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport koLocale from 'date-fns/locale/ko';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst Form = ({ data, setData }) => {\r\n  const [date, setDate] = useState(new Date());\r\n  const [name, setName] = useState('');\r\n  const [price, setPrice] = useState('');\r\n  const [place, setPlace] = useState('');\r\n  const classes = useStyles();\r\n\r\n  // 가계부에 항목 추가하기\r\n  const handleAdd = () => {\r\n    // 항목 추가 시 id로 넣어줄 maxId 만들기\r\n    const maxId = data.reduce((acc, daily) => {\r\n      const maxDailyId = daily.expenses.reduce((acc, expense) => (expense.id > acc ? expense.id : acc), 0);\r\n      return acc > maxDailyId ? acc : maxDailyId;\r\n    }, 0);\r\n\r\n    // 입력된 날짜가 없거나, 가격을 숫자로 바꾼 것이 숫자가 아닐 경우 바로 종료\r\n    if (!date) return;\r\n    if (isNaN(Number(price))) return;\r\n\r\n    // 입력된 날짜를 연, 월, 일로 구분하여 문자열로 바꾼 뒤 변수에 담음\r\n    const year = date.getFullYear().toString();\r\n    const month = String(date.getMonth() + 1); // month는 뒤에 1 더해주는 것 때문에 toString()말고 String()으로 묶어줌\r\n    const day = date.getDate().toString();\r\n\r\n    // 연, 월, 일 변수들을 합쳐서 strDate 변수 생성\r\n    // (월, 일의 경우 두 자리면 그대로 넣고, 한 자리면 앞에 \"0\" 추가)\r\n    const strDate = year + (month[1] ? month : '0' + month) + (day[1] ? day : '0' + day);\r\n\r\n    // 기존 객체의 date와 입력된 date를 비교하여\r\n    // 기존에 해당 날짜의 항목이 이미 있는지 확인\r\n    // Array.findIndex(): 배열에서 하나씩 꺼내서 조건에 맞는 경우의 인덱스 반환\r\n    const selectDataIndex = data.findIndex((daily) => daily.date === strDate);\r\n    console.log(selectDataIndex);\r\n\r\n    // 새로 입력된 날짜를 가진 항목이 없는 경우 => 신규 작성\r\n    if (selectDataIndex === -1) {\r\n      const addedData = [\r\n        // 기존의 daily 항목들은 유지\r\n        ...data,\r\n        // 새로운 daily 객체 추가\r\n        {\r\n          date: strDate, // 날짜는 입력된 날짜\r\n          income: 0, // 수입은 처음엔 0이라고 가정\r\n          expenses: [\r\n            // 비용은\r\n            {\r\n              id: maxId + 1,\r\n              name, // 품목은 입력된 name\r\n              price: Number(price), // 가격은 입력된 price를 숫자로 바꾼 것\r\n              place, // 구입처는 입력된 place\r\n            },\r\n          ],\r\n        },\r\n      ];\r\n      localStorage.setItem('data', JSON.stringify(addedData));\r\n      setData(addedData);\r\n\r\n      // 새로 입력된 날짜와 동일한 항목이 이미 존재하는 경우\r\n      // \t=> 객체를 새로 추가 x, 해당 날짜의 날짜를 제외한 다른 항목들만 수정\r\n    } else {\r\n      // 입력한 날짜와 다른 daily 객체들만 filter해서 따로 유지\r\n      const filteredData = data.filter((daily) => daily.date !== strDate);\r\n      // 입력된 날짜와 동일한 daily 객체를 인덱스로 찾아 변수에 담음 (사본 생성)\r\n      const selectData = data[selectDataIndex];\r\n\r\n      // 사본 수정 (income은 변동 없으므로 제외)\r\n      // expenses 배열에 입력된 name, price, place로 만들어진 객체를 맨 앞에 추가\r\n      selectData.expenses.unshift({ id: maxId + 1, name, price: Number(price), place });\r\n\r\n      // 수정된 데이터를 변수에 담은 뒤\r\n      const modifiedData = [...filteredData, selectData];\r\n\r\n      // 로컬스토리지에 추가하고\r\n      localStorage.setItem('data', JSON.stringify(modifiedData));\r\n      // setData에 넣어 App의 data 업데이트\r\n      setData(modifiedData);\r\n    }\r\n\r\n    console.log(data);\r\n    console.log(strDate);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils} locale={koLocale}>\r\n        <KeyboardDatePicker\r\n          autoOk\r\n          variant='inline'\r\n          inputVariant='outlined'\r\n          margin='normal'\r\n          fullWidth\r\n          className={classes.textField}\r\n          format='yyyy/MM/dd'\r\n          label='날짜'\r\n          value={date}\r\n          onChange={(date) => setDate(date)}\r\n        />\r\n      </MuiPickersUtilsProvider>\r\n      <br />\r\n      <TextField\r\n        variant='outlined'\r\n        margin='normal'\r\n        fullWidth\r\n        className={classes.textField}\r\n        label='품목'\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n      />\r\n      <br />\r\n      <TextField\r\n        variant='outlined'\r\n        margin='normal'\r\n        fullWidth\r\n        className={classes.textField}\r\n        label='가격'\r\n        value={price}\r\n        onChange={(e) => setPrice(e.target.value)}\r\n      />\r\n      <br />\r\n      <TextField\r\n        variant='outlined'\r\n        margin='normal'\r\n        fullWidth\r\n        className={classes.textField}\r\n        label='구입처'\r\n        value={place}\r\n        onChange={(e) => setPlace(e.target.value)}\r\n      />\r\n      <br />\r\n      <Button onClick={() => handleAdd()} variant='contained' color='primary' fullWidth className={classes.button}>\r\n        추가\r\n      </Button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n  padding-top: 30px;\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    textField: {\r\n      maxWidth: 300,\r\n      backgroundColor: '#fff',\r\n    },\r\n    button: {\r\n      marginTop: theme.spacing(3),\r\n      maxWidth: 300,\r\n    },\r\n  })\r\n);\r\n\r\nexport default Form;\r\n","import React, { useState } from 'react';\nimport { data as initialData } from './lib/data.json';\nimport styled from 'styled-components';\nimport Household from './components/Household';\nimport Daily from './components/Daily';\nimport Expense from './components/Expense';\nimport Form from './components/Form';\n\nfunction App() {\n  // 로컬스토리지에서 data를 가져옴\n  const localData = localStorage.getItem('data');\n  // 로컬스토리지에 data가 있으면 JSON화 해서 사용, 없으면 data.json의 데이터 사용\n  // (로컬스토리지는 문자열 데이터만 저장)\n  const getData = localData ? JSON.parse(localData) : initialData;\n\n  // Form에 로컬스토리지 또는 data.json에서 가져온 data 넘겨주기\n  const [data, setData] = useState(getData);\n  // modify는 수정할지 '여부'인데 여기서는 수정여부가 해당 칸에 hover를 했는지 안 했는지(css)이므로 modify 자체를 true/false로 판별하기 애매함\n  //  => props를 넘길 때 항상 자체적으로 넘어가는 index를 활용\n  const [modify, setModify] = useState();\n\n  // 데이터 정렬하기\n  const sortedData = data\n    // 날짜별 먼저 정렬 (a, b 자체가 객체로 꺼낸 것이어서 daily 사용 x)\n    .sort((a, b) => {\n      // 문자열이어서 단순한 마이너스 연산은 안됨\n      //  => data.sort((a, b) => a.date - b.date) (x)\n      // 비교 연산(>, <)은 가능\n      if (a.date > b.date) return 1;\n      else if (b.date > a.date) return -1;\n      else return 0;\n    })\n    // 이후 구입처별 정렬\n    .map((daily) => {\n      const sortedExpenses = daily.expenses.sort((a, b) => {\n        // 구입처도 문자열이므로 마찬가지로 비교 연산\n        if (a.place > b.place) return 1;\n        else if (b.place > a.place) return -1;\n        else return 0;\n      });\n\n      return {\n        // 기존 daily 내용에\n        ...daily,\n        // expenses만 sortedExpenses로 변경\n        expenses: sortedExpenses,\n      };\n    });\n\n  // 삭제하기\n  const handleRemove = (id) => {\n    const removedData = data.map((daily) => {\n      return {\n        ...daily,\n        expenses: daily.expenses.filter((expense) => expense.id !== id),\n      };\n    });\n    // 로컬스토리지에서도 삭제\n    // (로컬스토리지에 삭제가 완료된 데이터를 넣기 위해 문자열화)\n    localStorage.setItem('data', JSON.stringify(removedData));\n    setData(removedData);\n  };\n\n  // 수입 수정하기\n  // 수입을 수정하려는 항목의 index와 기존 수입 income을 받아옴\n  const handleModifyIncome = (index, income) => {\n    // 기존 데이터 보기 -> data에서 하나씩 꺼내서\n    const modifiedIncome = data.map((daily, idx) =>\n      // 꺼낸 idx가 받아온 index - 1 과 다르다면 => 수정 불가\n      idx !== index - 1\n        ? // daily(의 기존 income) 그대로 반환\n          daily\n        : // 같다면 => 수입 수정 가능\n          // 받아온 income 넣어주고 나머지 daily 내용은 그대로 유지\n          {\n            ...daily,\n            income,\n          }\n    );\n\n    // 로컬스토리지에 업데이트\n    localStorage.setItem('data', JSON.stringify(modifiedIncome));\n    // 수정한 수입이 들어간 data로 data 업데이트\n    setData(modifiedIncome);\n  };\n\n  return (\n    <Wrapper>\n      <Title>윤예나 님, 환영합니다!</Title>\n      <Container>\n        {/* 화면 좌측의 입력 폼 */}\n        <Form data={data} setData={setData} />\n        <Household>\n          {/* Household 안에 sort된 Daily */}\n          {sortedData.map((daily, idx) => (\n            <Daily\n              key={idx}\n              index={idx + 1}\n              date={daily.date}\n              income={daily.income}\n              // Array.reduce((acc, cur) => { }, 0) - acc: 누적값, cur: 현재 더할 값\n              total={daily.expenses.reduce((acc, cur) => acc + cur.price, 0)}\n              // modify는 기존 데이터에서 하나씩 뽑은 각 항목의 idx에 +1 한 값이 넘어감\n              // (첫번째 항목은 idx가 0이므로 +1을 해줘야 modify가 0이 되지 않음)\n              // (0은 나중에 setModify에서 modify를 'false'로 바꿀 때 사용)\n              modify={modify === idx + 1}\n              setModify={setModify}\n              onModify={handleModifyIncome}\n            >\n              {/* Daily 안에 Expense */}\n              {daily.expenses.map((expense, idx) => (\n                <Expense\n                  key={idx}\n                  id={expense.id}\n                  index={idx + 1}\n                  name={expense.name}\n                  price={expense.price}\n                  place={expense.place}\n                  onRemove={handleRemove}\n                />\n              ))}\n            </Daily>\n          ))}\n        </Household>\n      </Container>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-family: 'Nanum Gothic Coding', monospace;\n`;\n\nconst Title = styled.div`\n  height: 7vh;\n  font-size: 18px;\n  text-align: center;\n  line-height: 7vh;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  background-color: whitesmoke;\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}